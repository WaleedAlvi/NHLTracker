[{"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\index.tsx":"1","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\reportWebVitals.ts":"2","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\layouts\\App.tsx":"3","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\api\\agent.ts":"4","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\api\\teams.ts":"5","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\teams\\teamDashboard.tsx":"6","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\nav\\NavBar.tsx":"7","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\headtohead\\HeadToHead.tsx":"8","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\shared\\calculateTotal.ts":"9","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\shared\\enums.ts":"10","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\teams\\TeamDetail.tsx":"11","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\headtohead\\HeadToHeadCategory.tsx":"12","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\headtohead\\ProgressBar.tsx":"13","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\Home\\HomePage.tsx":"14","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\GameSchedule.tsx":"15","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\GamesByDate.tsx":"16","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\GameScore.tsx":"17","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\stores\\datesStore.ts":"18","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\stores\\teamsStore.ts":"19","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\shared\\common.ts":"20","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\stores\\rootStore.ts":"21","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\TeamScore.tsx":"22"},{"size":769,"mtime":1615169026373,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":1702,"mtime":1615748132003,"results":"26","hashOfConfig":"24"},{"size":1311,"mtime":1615746072613,"results":"27","hashOfConfig":"24"},{"size":410,"mtime":1615568720005,"results":"28","hashOfConfig":"24"},{"size":3955,"mtime":1615747162323,"results":"29","hashOfConfig":"24"},{"size":823,"mtime":1614740050832,"results":"30","hashOfConfig":"24"},{"size":2023,"mtime":1614740050829,"results":"31","hashOfConfig":"24"},{"size":2209,"mtime":1615214915098,"results":"32","hashOfConfig":"24"},{"size":103,"mtime":1611805909495,"results":"33","hashOfConfig":"24"},{"size":1030,"mtime":1615216108838,"results":"34","hashOfConfig":"24"},{"size":2471,"mtime":1615051130779,"results":"35","hashOfConfig":"24"},{"size":2129,"mtime":1614740050831,"results":"36","hashOfConfig":"24"},{"size":299,"mtime":1614740050829,"results":"37","hashOfConfig":"24"},{"size":677,"mtime":1615859509851,"results":"38","hashOfConfig":"24"},{"size":963,"mtime":1615860611089,"results":"39","hashOfConfig":"24"},{"size":1186,"mtime":1615861994802,"results":"40","hashOfConfig":"24"},{"size":782,"mtime":1615748282962,"results":"41","hashOfConfig":"24"},{"size":3715,"mtime":1615859506745,"results":"42","hashOfConfig":"24"},{"size":519,"mtime":1614740050825,"results":"43","hashOfConfig":"24"},{"size":439,"mtime":1615046752652,"results":"44","hashOfConfig":"24"},{"size":1021,"mtime":1615861963412,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"5ruskn",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\index.tsx",[],["95","96"],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\reportWebVitals.ts",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\layouts\\App.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\api\\agent.ts",["97"],"import axios, { AxiosResponse } from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://statsapi.web.nhl.com/api/v1';\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst request = {\r\n    get: (url: string) => axios.get(url).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\r\n    delete: (url: string) => axios.delete(url).then(responseBody),\r\n}\r\n\r\nconst TeamDetail = (teamID: number) => {\r\n    return request.get(`/teams/${teamID.toString()}/stats`);\r\n}\r\n\r\nconst Teams = (teamIDs: number[]) => {\r\n    return request.get(`/teams/?teamId=${teamIDs.join()}&expand=team.stats`);\r\n}\r\n\r\nconst TeamGames = (teamID: number[], startDate: Date, endDate: Date) =>{\r\n\r\n    const startDateString: string = `&startDate=${startDate.toLocaleDateString()}`;\r\n    const endDateString: string = `&endDate=${endDate.toLocaleDateString()}`;\r\n    let teamIDString: string = '';\r\n\r\n    teamID.map((teamID: number, i: number) => {\r\n        return teamIDString += i === 0 ? `teamId=${teamID}` : `&teamId=${teamID}`;\r\n    })\r\n    return request.get(`/schedule?${teamIDString}${startDateString}${endDateString}`);\r\n}\r\n\r\nexport default {\r\n    TeamDetail,\r\n    Teams,\r\n    TeamGames,\r\n}\r\n\r\n\r\n","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\api\\teams.ts",["98"],"\r\nconst tamptaBayID: number = 14;\r\nconst coloradoID: number = 21;\r\nconst bostonID: number = 6;\r\nconst edmontonID: number = 22;\r\nconst carolinaID: number = 12;\r\nconst vegasID: number = 54;\r\nconst pittsburghID: number = 5;\r\nconst winnipegID: number = 52;\r\n\r\nexport default {\r\n    tamptaBayID,\r\n    coloradoID,\r\n    bostonID,\r\n    edmontonID,\r\n    carolinaID,\r\n    vegasID,\r\n    pittsburghID,\r\n    winnipegID\r\n}\r\n","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\teams\\teamDashboard.tsx",["99"],"import React, { useEffect } from 'react';\r\nimport { Container, Grid, Segment, Table } from 'semantic-ui-react';\r\nimport { IGames } from '../../app/models/games';\r\nimport { ITeam } from '../../app/models/team';\r\nimport * as calculateStat from '../../app/shared/calculateTotal';\r\nimport GameSchedule from '../scores/GameSchedule';\r\nimport TeamDetail from './TeamDetail';\r\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\r\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\r\nimport { seasonEndDate, seasonStartDate } from '../../app/shared/common';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../app/stores/rootStore';\r\n\r\ninterface IProps {\r\n  teams: ITeam[];\r\n  teamSchedule: IGames[];\r\n  teamName: string;\r\n}\r\n\r\nconst TeamDashboard: React.FC<IProps> = ({ teams, teamName, teamSchedule }) => {\r\n  const { teamsStore, datesStore } = useStore();\r\n\r\n  let teamIds: number[] = [];\r\n  teams.map((team) => {\r\n    return teamIds.push(team.id);\r\n  });\r\n\r\n  useEffect(() => {\r\n    teamsStore.loadScheudle(\r\n      teamSchedule,\r\n      teamIds,\r\n      datesStore.startDate,\r\n      datesStore.endDate\r\n    );\r\n  }, [\r\n    datesStore.startDate,\r\n    datesStore.endDate,\r\n    teamSchedule,\r\n    teamIds,\r\n    teamsStore,\r\n  ]);\r\n\r\n  return (\r\n    <Container>\r\n      <Container>\r\n        <Segment>\r\n          <Grid columns={2} stackable textAlign=\"center\">\r\n            <Grid.Row verticalAlign=\"middle\">\r\n              <Grid.Column>\r\n                <SemanticDatepicker\r\n                  allowOnlyNumbers={true}\r\n                  value={new Date(datesStore.startDate)}\r\n                  clearable={false}\r\n                  type=\"basic\"\r\n                  onChange={datesStore.setStartDate}\r\n                  minDate={seasonStartDate}\r\n                  maxDate={seasonEndDate}\r\n                />\r\n              </Grid.Column>\r\n\r\n              <Grid.Column>\r\n                <SemanticDatepicker\r\n                  allowOnlyNumbers={true}\r\n                  value={new Date(datesStore.endDate)}\r\n                  clearable={false}\r\n                  type=\"basic\"\r\n                  onChange={datesStore.setEndDate}\r\n                  minDate={datesStore.startDate}\r\n                  maxDate={seasonEndDate}\r\n                />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n          <GameSchedule games={teamSchedule} />\r\n        </Segment>\r\n      </Container>\r\n      <Table style={{ overflowX: 'auto' }}>\r\n        <Table.Header>\r\n          <Table.Row textAlign=\"center\">\r\n            <Table.HeaderCell>{teamName}</Table.HeaderCell>\r\n            <Table.HeaderCell>Team</Table.HeaderCell>\r\n            <Table.HeaderCell>Games Played</Table.HeaderCell>\r\n            <Table.HeaderCell>Wins</Table.HeaderCell>\r\n            <Table.HeaderCell>Loses</Table.HeaderCell>\r\n            <Table.HeaderCell>OT Loses</Table.HeaderCell>\r\n            <Table.HeaderCell>Points</Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n\r\n        <TeamDetail teams={teams} />\r\n\r\n        <Table.Footer>\r\n          <Table.Row textAlign=\"center\">\r\n            <Table.HeaderCell></Table.HeaderCell>\r\n            <Table.HeaderCell>Totals</Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              {calculateStat.TotalGamesPlayed(teams)}\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              {calculateStat.TotalWins(teams)}\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              {calculateStat.TotalLoses(teams)}\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              {calculateStat.TotalOTLoses(teams)}\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              <b>{calculateStat.TotalPoints(teams)}</b>\r\n            </Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Footer>\r\n      </Table>\r\n    </Container>\r\n  );\r\n};\r\nexport default observer(TeamDashboard);\r\n","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\nav\\NavBar.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\headtohead\\HeadToHead.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\shared\\calculateTotal.ts",["100"],"import { ITeam } from \"../models/team\";\r\nimport { teamCategory } from \"./enums\";\r\n\r\nexport default {}\r\nconst CalcuateTotalGamesPlayed = (teams: ITeam[]) => {\r\n  let total: number = 0;\r\n  teams.map((team) => {\r\n    return total += team.gamesPlayed;\r\n  })\r\n  return total;\r\n  };\r\n  \r\n  const CalcuateTotalWins = (teams: ITeam[]) => {\r\n    let total: number = 0;\r\n    teams.map((team) => {\r\n      return total += team.wins;\r\n  })\r\n  return total;\r\n  };\r\n  \r\n  const CalcuateTotalLoses = (teams: ITeam[]) => {\r\n    let total: number = 0;\r\n    teams.map((team) => {\r\n      return total += team.losses;\r\n  })\r\n  return total;\r\n  };\r\n  \r\n  const CalcuateTotalOTLoses = (teams: ITeam[]) => {\r\n    let total: number = 0;\r\n    teams.map((team) => {\r\n    return total += team.overTimeLoses;\r\n  })\r\n  return total;\r\n  };\r\n  \r\n  const CalcuateTotalPoints = (teams: ITeam[]) => {\r\n    let total: number = 0;\r\n    teams.map((team) => {\r\n    return total += team.points;\r\n  })\r\n  return total;\r\n  };\r\n\r\n  const CalculateWinPercentage = (teams: ITeam[]) => {\r\n    const totalWins: number = CalcuateTotalWins(teams);\r\n    const totalGamesPlayed: number = CalcuateTotalWins(teams);\r\n    return totalWins/totalGamesPlayed;\r\n  }\r\n\r\n  const SelectCalculation = (category: teamCategory, teams: ITeam[]) =>{\r\n    let total: number = 0;\r\n    switch (category) {\r\n      case teamCategory.gamesPlayed: {\r\n        total = CalcuateTotalGamesPlayed(teams);\r\n        break;\r\n      }\r\n      case teamCategory.wins: {\r\n        total = CalcuateTotalWins(teams);\r\n        break;\r\n      }\r\n      case teamCategory.losses: {\r\n        total = CalcuateTotalLoses(teams);\r\n        break;\r\n      }\r\n      case teamCategory.overTimeLoses: {\r\n        total = CalcuateTotalOTLoses(teams);\r\n        break;\r\n      }\r\n      case teamCategory.points: {\r\n        total = CalcuateTotalPoints(teams);\r\n        break;\r\n      }\r\n      \r\n    }\r\n    return total;\r\n  }\r\n\r\n  export {\r\n    CalcuateTotalGamesPlayed as TotalGamesPlayed, \r\n    CalcuateTotalWins as TotalWins, \r\n    CalcuateTotalLoses as TotalLoses, \r\n    CalcuateTotalOTLoses as TotalOTLoses, \r\n    CalcuateTotalPoints as TotalPoints,\r\n    SelectCalculation,\r\n    CalculateWinPercentage\r\n  }\r\n\r\n\r\n    ","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\shared\\enums.ts",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\teams\\TeamDetail.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\headtohead\\HeadToHeadCategory.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\headtohead\\ProgressBar.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\Home\\HomePage.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\GameSchedule.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\GamesByDate.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\GameScore.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\stores\\datesStore.ts",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\stores\\teamsStore.ts",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\shared\\common.ts",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\stores\\rootStore.ts",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\TeamScore.tsx",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":34,"column":1,"nodeType":"107","endLine":38,"endColumn":2},{"ruleId":"105","severity":1,"message":"106","line":11,"column":1,"nodeType":"107","endLine":20,"endColumn":2},{"ruleId":"108","severity":1,"message":"109","line":23,"column":7,"nodeType":"110","endLine":23,"endColumn":29},{"ruleId":"105","severity":1,"message":"106","line":4,"column":1,"nodeType":"107","endLine":4,"endColumn":18},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","The 'teamIds' array makes the dependencies of useEffect Hook (at line 35) change on every render. To fix this, wrap the initialization of 'teamIds' in its own useMemo() Hook.","VariableDeclarator","no-global-assign","no-unsafe-negation"]