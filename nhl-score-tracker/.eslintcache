[{"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\index.tsx":"1","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\reportWebVitals.ts":"2","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\layouts\\App.tsx":"3","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\api\\agent.ts":"4","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\api\\teams.ts":"5","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\teams\\teamDashboard.tsx":"6","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\nav\\NavBar.tsx":"7","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\headtohead\\HeadToHead.tsx":"8","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\shared\\calculateTotal.ts":"9","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\shared\\enums.ts":"10","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\teams\\TeamDetail.tsx":"11","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\headtohead\\HeadToHeadCategory.tsx":"12","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\headtohead\\ProgressBar.tsx":"13","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\Home\\HomePage.tsx":"14","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\GameSchedule.tsx":"15","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\GamesByDate.tsx":"16","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\GameScore.tsx":"17","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\stores\\datesStore.ts":"18","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\stores\\teamsStore.ts":"19","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\shared\\common.ts":"20","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\stores\\rootStore.ts":"21","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\TeamScore.tsx":"22"},{"size":769,"mtime":1614740050836,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":1688,"mtime":1615071747909,"results":"26","hashOfConfig":"24"},{"size":1406,"mtime":1614740050823,"results":"27","hashOfConfig":"24"},{"size":410,"mtime":1612555908287,"results":"28","hashOfConfig":"24"},{"size":3944,"mtime":1615047559955,"results":"29","hashOfConfig":"24"},{"size":823,"mtime":1614740050832,"results":"30","hashOfConfig":"24"},{"size":2023,"mtime":1614740050829,"results":"31","hashOfConfig":"24"},{"size":2141,"mtime":1612562021601,"results":"32","hashOfConfig":"24"},{"size":103,"mtime":1611805909495,"results":"33","hashOfConfig":"24"},{"size":1091,"mtime":1615048777992,"results":"34","hashOfConfig":"24"},{"size":2471,"mtime":1615051130779,"results":"35","hashOfConfig":"24"},{"size":2129,"mtime":1614740050831,"results":"36","hashOfConfig":"24"},{"size":299,"mtime":1614740050829,"results":"37","hashOfConfig":"24"},{"size":658,"mtime":1615069516972,"results":"38","hashOfConfig":"24"},{"size":944,"mtime":1615073455666,"results":"39","hashOfConfig":"24"},{"size":1026,"mtime":1615073228549,"results":"40","hashOfConfig":"24"},{"size":707,"mtime":1615067871697,"results":"41","hashOfConfig":"24"},{"size":2865,"mtime":1615053368125,"results":"42","hashOfConfig":"24"},{"size":519,"mtime":1614740050825,"results":"43","hashOfConfig":"24"},{"size":439,"mtime":1615046752652,"results":"44","hashOfConfig":"24"},{"size":582,"mtime":1615070788626,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"5ruskn",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"48"},"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\index.tsx",[],["98","99"],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\reportWebVitals.ts",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\layouts\\App.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\api\\agent.ts",["100"],"import axios, { AxiosResponse } from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://statsapi.web.nhl.com/api/v1';\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst request = {\r\n    get: (url: string) => axios.get(url).then(responseBody),\r\n    post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\r\n    delete: (url: string) => axios.delete(url).then(responseBody),\r\n}\r\n\r\nconst TeamDetail = (teamID: number) => {\r\n    return request.get(`/teams/${teamID.toString()}/stats`);\r\n}\r\n\r\nconst Teams = (teamIDs: number[]) => {\r\n    return request.get(`/teams/?teamId=${teamIDs.join()}&expand=team.stats`);\r\n}\r\n\r\nconst TeamGames = (teamID: number[], startDate: Date, endDate: Date) =>{\r\n\r\n    const startDateString: string = `&startDate=${startDate.toISOString().split('T')[0]}`;\r\n    const endDateString: string = `&endDate=${endDate.toISOString().split('T')[0]}`;\r\n    let teamIDString: string = '';\r\n\r\n    teamID.map((teamID: number, i: number) => {\r\n        return teamIDString += i === 0 ? `teamId=${teamID}` : `&teamId=${teamID}`;\r\n    })\r\n    console.log(`/schedule?${teamIDString}${startDateString}${endDateString}`);\r\n    return request.get(`/schedule?${teamIDString}${startDateString}${endDateString}`);\r\n}\r\n\r\nexport default {\r\n    TeamDetail,\r\n    Teams,\r\n    TeamGames,\r\n}\r\n\r\n\r\n","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\api\\teams.ts",["101"],"\r\nconst tamptaBayID: number = 14;\r\nconst coloradoID: number = 21;\r\nconst bostonID: number = 6;\r\nconst edmontonID: number = 22;\r\nconst carolinaID: number = 12;\r\nconst vegasID: number = 54;\r\nconst pittsburghID: number = 5;\r\nconst winnipegID: number = 52;\r\n\r\nexport default {\r\n    tamptaBayID,\r\n    coloradoID,\r\n    bostonID,\r\n    edmontonID,\r\n    carolinaID,\r\n    vegasID,\r\n    pittsburghID,\r\n    winnipegID\r\n}\r\n","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\teams\\teamDashboard.tsx",["102","103"],"import React, { useEffect } from 'react';\r\nimport { Container, Grid, Segment, Table } from 'semantic-ui-react';\r\nimport { IGames } from '../../app/models/games';\r\nimport { ITeam } from '../../app/models/team';\r\nimport * as calculateStat from '../../app/shared/calculateTotal';\r\nimport GameSchedule from '../scores/GameSchedule';\r\nimport TeamDetail from './TeamDetail';\r\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\r\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\r\nimport { seasonEndDate, seasonStartDate } from '../../app/shared/common';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../app/stores/rootStore';\r\n\r\ninterface IProps {\r\n  teams: ITeam[];\r\n  teamSchedule: IGames[];\r\n  teamName: string;\r\n}\r\n\r\nconst TeamDashboard: React.FC<IProps> = ({ teams, teamName, teamSchedule }) => {\r\n  const { teamsStore, datesStore } = useStore();\r\n\r\n  teams.slice().sort((a, b) => b.points - a.points);\r\n  let teamIds: number[] = [];\r\n\r\n  useEffect(() => {\r\n    teams.map((team) => {\r\n      teamIds.push(team.id);\r\n    });\r\n\r\n    teamsStore.loadScheudle(\r\n      teamSchedule,\r\n      teamIds,\r\n      datesStore.startDate,\r\n      datesStore.endDate\r\n    );\r\n  }, [datesStore.startDate, datesStore.endDate]);\r\n\r\n  return (\r\n    <Container>\r\n      <Container>\r\n        <Segment>\r\n          <Grid columns={2} stackable textAlign=\"center\">\r\n            <Grid.Row verticalAlign=\"middle\">\r\n              <Grid.Column>\r\n                <SemanticDatepicker\r\n                  allowOnlyNumbers={true}\r\n                  value={new Date(datesStore.startDate)}\r\n                  clearable={false}\r\n                  type=\"basic\"\r\n                  onChange={datesStore.setStartDate}\r\n                  minDate={seasonStartDate}\r\n                  maxDate={seasonEndDate}\r\n                />\r\n              </Grid.Column>\r\n\r\n              <Grid.Column>\r\n                <SemanticDatepicker\r\n                  allowOnlyNumbers={true}\r\n                  value={new Date(datesStore.endDate)}\r\n                  clearable={false}\r\n                  type=\"basic\"\r\n                  onChange={datesStore.setEndDate}\r\n                  minDate={datesStore.startDate}\r\n                  maxDate={seasonEndDate}\r\n                />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n          <GameSchedule games={teamSchedule} />\r\n        </Segment>\r\n      </Container>\r\n      <Table style={{ overflowX: 'auto' }}>\r\n        <Table.Header>\r\n          <Table.Row textAlign=\"center\">\r\n            <Table.HeaderCell>{teamName}</Table.HeaderCell>\r\n            <Table.HeaderCell>Team</Table.HeaderCell>\r\n            <Table.HeaderCell>Games Played</Table.HeaderCell>\r\n            <Table.HeaderCell>Wins</Table.HeaderCell>\r\n            <Table.HeaderCell>Loses</Table.HeaderCell>\r\n            <Table.HeaderCell>OT Loses</Table.HeaderCell>\r\n            <Table.HeaderCell>Points</Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n\r\n        <TeamDetail teams={teams} />\r\n\r\n        <Table.Footer>\r\n          <Table.Row textAlign=\"center\">\r\n            <Table.HeaderCell></Table.HeaderCell>\r\n            <Table.HeaderCell>Totals</Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              {calculateStat.TotalGamesPlayed(teams)}\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              {calculateStat.TotalWins(teams)}\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              {calculateStat.TotalLoses(teams)}\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              {calculateStat.TotalOTLoses(teams)}\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              <b>{calculateStat.TotalPoints(teams)}</b>\r\n            </Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Footer>\r\n      </Table>\r\n    </Container>\r\n  );\r\n};\r\nexport default observer(TeamDashboard);\r\n","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\nav\\NavBar.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\headtohead\\HeadToHead.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\shared\\calculateTotal.ts",["104","105","106","107","108","109","110"],"import { ITeam } from \"../models/team\";\r\nimport { teamCategory } from \"./enums\";\r\n\r\nexport default {}\r\nconst CalcuateTotalGamesPlayed = (teams: ITeam[]) => {\r\n  let total: number = 0;\r\n  teams.map((team) => {\r\n    total += team.gamesPlayed;\r\n  })\r\n  return total;\r\n  };\r\n  \r\n  const CalcuateTotalWins = (teams: ITeam[]) => {\r\n    let total: number = 0;\r\n    teams.map((team) => {\r\n    total += team.wins;\r\n  })\r\n  return total;\r\n  };\r\n  \r\n  const CalcuateTotalLoses = (teams: ITeam[]) => {\r\n    let total: number = 0;\r\n    teams.map((team) => {\r\n    total += team.losses;\r\n  })\r\n  return total;\r\n  };\r\n  \r\n  const CalcuateTotalOTLoses = (teams: ITeam[]) => {\r\n    let total: number = 0;\r\n    teams.map((team) => {\r\n    total += team.overTimeLoses;\r\n  })\r\n  return total;\r\n  };\r\n  \r\n  const CalcuateTotalPoints = (teams: ITeam[]) => {\r\n    let total: number = 0;\r\n    teams.map((team) => {\r\n    total += team.points;\r\n  })\r\n  return total;\r\n  };\r\n\r\n  const CalculateWinPercentage = (teams: ITeam[]) => {\r\n    const totalWins: number = CalcuateTotalWins(teams);\r\n    const totalGamesPlayed: number = CalcuateTotalWins(teams);\r\n    return totalWins/totalGamesPlayed;\r\n  }\r\n\r\n  const SelectCalculation = (category: teamCategory, teams: ITeam[]) =>{\r\n    let total: number = 0;\r\n    switch (category) {\r\n      case teamCategory.gamesPlayed: {\r\n        total = CalcuateTotalGamesPlayed(teams);\r\n        break;\r\n      }\r\n      case teamCategory.wins: {\r\n        total = CalcuateTotalWins(teams);\r\n        break;\r\n      }\r\n      case teamCategory.losses: {\r\n        total = CalcuateTotalLoses(teams);\r\n        break;\r\n      }\r\n      case teamCategory.overTimeLoses: {\r\n        total = CalcuateTotalOTLoses(teams);\r\n        break;\r\n      }\r\n      case teamCategory.points: {\r\n        total = CalcuateTotalPoints(teams);\r\n        break;\r\n      }\r\n      \r\n    }\r\n    return total;\r\n  }\r\n\r\n  export {\r\n    CalcuateTotalGamesPlayed as TotalGamesPlayed, \r\n    CalcuateTotalWins as TotalWins, \r\n    CalcuateTotalLoses as TotalLoses, \r\n    CalcuateTotalOTLoses as TotalOTLoses, \r\n    CalcuateTotalPoints as TotalPoints,\r\n    SelectCalculation\r\n  }\r\n\r\n\r\n    ","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\shared\\enums.ts",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\teams\\TeamDetail.tsx",["111"],"import React from 'react';\r\nimport { Image, Table } from 'semantic-ui-react';\r\nimport { ITeam } from '../../app/models/team';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n  teams: ITeam[];\r\n}\r\n\r\nconst TeamDetail: React.FC<IProps> = ({ teams }) => {\r\n  return (\r\n    <Table.Body>\r\n      {teams.map((team) => {\r\n        if (team.name !== '')\r\n          return (\r\n            <Table.Row key={team.name} textAlign=\"center\">\r\n              <Table.Cell>\r\n                <Image verticalAlign=\"middle\" src={team.logo} size=\"mini\" />\r\n              </Table.Cell>\r\n              <Table.Cell>\r\n                <a href={team.nhlURL}>{team.name}</a>\r\n              </Table.Cell>\r\n              <Table.Cell>{team.gamesPlayed}</Table.Cell>\r\n              <Table.Cell>{team.wins}</Table.Cell>\r\n              <Table.Cell>{team.losses}</Table.Cell>\r\n              <Table.Cell>{team.overTimeLoses}</Table.Cell>\r\n              <Table.Cell>{team.points}</Table.Cell>\r\n            </Table.Row>\r\n          );\r\n      })}\r\n    </Table.Body>\r\n  );\r\n};\r\n\r\nexport default observer(TeamDetail);\r\n","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\headtohead\\HeadToHeadCategory.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\headtohead\\ProgressBar.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\Home\\HomePage.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\GameSchedule.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\GamesByDate.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\GameScore.tsx",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\stores\\datesStore.ts",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\stores\\teamsStore.ts",["112"],"import { makeAutoObservable, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { IGames } from '../models/games';\r\nimport { ITeam } from '../models/team';\r\n\r\nexport default class TeamsStore {\r\n    boysTeam: ITeam[] = [];\r\n    girlsTeam: ITeam[] = [];\r\n    boysSchedule: IGames[] = [];\r\n    girlsSchedule: IGames[] = [];\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n\r\n    loadTeam = (lstOfTeams: ITeam[], teamIds: number[]) => {\r\n        agent.Teams(teamIds).then((teams) => {\r\n            runInAction(() => {\r\n                teams.teams.map((team: any) => {\r\n                    return (lstOfTeams.push({\r\n                        id: team.id,\r\n                        name: team.name,\r\n                        division: team.division.name,\r\n                        gamesPlayed: team.teamStats[0].splits[0].stat.gamesPlayed,\r\n                        wins: team.teamStats[0].splits[0].stat.wins,\r\n                        losses: team.teamStats[0].splits[0].stat.losses,\r\n                        overTimeLoses: team.teamStats[0].splits[0].stat.ot,\r\n                        points: team.teamStats[0].splits[0].stat.pts,\r\n                        nhlURL: team.officialSiteUrl,\r\n                        logo: `/assets/${team.id}_logo.png`,\r\n                    }))\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    loadScheudle = (teamSchedule: IGames[], teamIds: number[] ,startDate: Date, endDate: Date) => {\r\n        teamSchedule.length = 0; \r\n        agent.TeamGames(teamIds, startDate, endDate).then((scheudle) => {\r\n            console.log(scheudle.dates);\r\n            runInAction(() => {\r\n                scheudle.dates.map((date: any) => {\r\n                    let sched: IGames = {\r\n                        date: date.date,\r\n                        games: date.games.map((game: any) => {\r\n                            return {\r\n                                date: game.gameDate,\r\n                                status: game.status.detailedState,\r\n                                homeTeam: {\r\n                                  teamName: game.teams.home.team.name,\r\n                                  score: game.teams.home.score,\r\n                                  logo: `/assets/${game.teams.home.team.id}_logo.png`,\r\n                                },\r\n                                awayTeam: {\r\n                                  teamName: game.teams.away.team.name,\r\n                                  score: game.teams.away.score,\r\n                                  logo: `/assets/${game.teams.away.team.id}_logo.png`,\r\n                                },\r\n                            };\r\n                        }),\r\n                    }\r\n                    teamSchedule.push(sched);\r\n                })\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n// export default createContext(new TeamsStore());\r\n\r\n","G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\shared\\common.ts",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\app\\stores\\rootStore.ts",[],"G:\\Personal Projects\\NHLScoreTracker\\nhl-score-tracker\\src\\features\\scores\\TeamScore.tsx",["113"],"import React from 'react';\r\nimport { ITeamScore } from '../../app/models/teamScore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n  teamScore: ITeamScore;\r\n  Style: React.CSSProperties;\r\n}\r\n\r\nconst TeamScore: React.FC<IProps> = ({ teamScore, Style }) => {\r\n  return (\r\n    <div style={Style}>\r\n      <img\r\n        src={teamScore.logo}\r\n        style={{ width: '35px', height: 'auto', fontSize: '.78571429rem' }}\r\n      />\r\n      <div>{teamScore.teamName}</div>\r\n      <div>{teamScore.score}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(TeamScore);\r\n",{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":35,"column":1,"nodeType":"120","endLine":39,"endColumn":2},{"ruleId":"118","severity":1,"message":"119","line":11,"column":1,"nodeType":"120","endLine":20,"endColumn":2},{"ruleId":"121","severity":1,"message":"122","line":27,"column":22,"nodeType":"123","messageId":"124","endLine":27,"endColumn":24},{"ruleId":"125","severity":1,"message":"126","line":37,"column":6,"nodeType":"127","endLine":37,"endColumn":48,"suggestions":"128"},{"ruleId":"118","severity":1,"message":"119","line":4,"column":1,"nodeType":"120","endLine":4,"endColumn":18},{"ruleId":"121","severity":1,"message":"122","line":7,"column":20,"nodeType":"123","messageId":"124","endLine":7,"endColumn":22},{"ruleId":"121","severity":1,"message":"122","line":15,"column":22,"nodeType":"123","messageId":"124","endLine":15,"endColumn":24},{"ruleId":"121","severity":1,"message":"122","line":23,"column":22,"nodeType":"123","messageId":"124","endLine":23,"endColumn":24},{"ruleId":"121","severity":1,"message":"122","line":31,"column":22,"nodeType":"123","messageId":"124","endLine":31,"endColumn":24},{"ruleId":"121","severity":1,"message":"122","line":39,"column":22,"nodeType":"123","messageId":"124","endLine":39,"endColumn":24},{"ruleId":"129","severity":1,"message":"130","line":45,"column":9,"nodeType":"131","messageId":"132","endLine":45,"endColumn":31},{"ruleId":"121","severity":1,"message":"133","line":13,"column":25,"nodeType":"123","messageId":"134","endLine":13,"endColumn":27},{"ruleId":"121","severity":1,"message":"122","line":43,"column":48,"nodeType":"123","messageId":"124","endLine":43,"endColumn":50},{"ruleId":"135","severity":1,"message":"136","line":13,"column":7,"nodeType":"137","endLine":16,"endColumn":9},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'teamIds', 'teamSchedule', 'teams', and 'teamsStore'. Either include them or remove the dependency array.","ArrayExpression",["140"],"@typescript-eslint/no-unused-vars","'CalculateWinPercentage' is assigned a value but never used.","Identifier","unusedVar","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},"Update the dependencies array to be: [datesStore.startDate, datesStore.endDate, teams, teamsStore, teamSchedule, teamIds]",{"range":"143","text":"144"},[1230,1272],"[datesStore.startDate, datesStore.endDate, teams, teamsStore, teamSchedule, teamIds]"]